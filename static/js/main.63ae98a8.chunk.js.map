{"version":3,"sources":["component/nav_bar.component.jsx","pages/table/table.component.jsx","pages/form/form.component.jsx","pages/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","TableDynamic","state","datas","userId","id","title","fetch","then","response","json","posts","setState","Table","striped","bordered","hover","this","map","key","body","React","Component","ValidationForm","props","handlechangeall","event","input","target","name","value","handlesubmit","preventDefault","validate","console","log","alert","email","fullname","mobile","errors","isValid","RegExp","test","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","Text","Button","variant","Home","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.63ae98a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link} from 'react-router-dom';\r\n\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n\r\n\r\n\r\nfunction Nav() {\r\n        return(\r\n                \r\n                        <nav className='nav nav-pills nav-fill'>\r\n\r\n                            <Link to =\"Table\">\r\n                                <span className='nav-link'>TABLE</span>\r\n                            \r\n                            </Link>\r\n                            <Link to = \"Form\">\r\n                            \r\n                                <span className='nav-link'>FORM</span>\r\n                            </Link>\r\n\r\n                        \r\n                        \r\n                        </nav>\r\n            \r\n        );\r\n\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport{Table} from 'react-bootstrap';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass TableDynamic extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {datas:[],\r\n            userId:'',\r\n            id:'',\r\n            title:''\r\n      \r\n          };\r\n        \r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(response => response.json()\r\n        .then(posts=>this.setState({datas:posts}))\r\n        )\r\n      }\r\n    render(){\r\n        \r\n        return(\r\n            <div className='table_list'> \r\n                                          \r\n                            <Table striped bordered hover>\r\n\r\n                                 <thead>\r\n                                    <tr>\r\n                                      <th>UserID</th>\r\n                                      <th>ID</th>\r\n                                      <th>Title</th>\r\n                                      <th>Body</th>\r\n                                    </tr>\r\n                                  </thead>\r\n                                  {\r\n                                  this.state.datas.map(datas => (                        \r\n                                  <tbody key = {datas.id}>\r\n                                      <tr >\r\n                                        <td>{datas.userId}</td>\r\n                                        <td> {datas.id}</td>\r\n                                        <td>{datas.title}</td>\r\n                                        <td>{datas.body}</td>\r\n                                      </tr>\r\n                                 </tbody>\r\n                     \r\n                                    ))\r\n                                   } \r\n                           </Table>\r\n                         \r\n                    \r\n              </div>      \r\n  \r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default TableDynamic;","import React from 'react';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport {Form, Button} from 'react-bootstrap';\r\nimport './form.style.css';\r\n\r\n\r\nclass  ValidationForm extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            // email:'',\r\n            // fullname:'',\r\n            // mobile:'',\r\n            input:{\r\n                email:'',\r\n                fullname:'',\r\n                mobile:''\r\n            },\r\n            errors:{}\r\n        };\r\n\r\n    }\r\n\r\nhandlechangeall = (event) =>{\r\n    // this.setState ( { [event.target.name] :event.target.value  } )\r\n    let input= this.state.input;\r\n    input[event.target.name] = event.target.value;\r\n\r\n    this.setState({\r\n        input\r\n    })\r\n   }\r\n\r\n   handlesubmit = (event) => {\r\n    // alert (` \r\n    //   email id is ${this.state.email}\r\n    //   fullname is ${this.state.fullname}\r\n    //   mobile is ${this.state.mobile}\r\n    //  `);\r\n    // alert( JSON.stringify(this.state));\r\n    // console.log( JSON.stringify(this.state));\r\n    event.preventDefault();\r\n\r\n\r\n    if(this.validate()){\r\n        console.log(this.state);\r\n        let input = {};\r\n        input[\"fullname\"] = \"\";\r\n        input[\"mobile\"] = \"\";\r\n        input[\"email\"] = \"\";\r\n        this.setState({input:input});\r\n\r\n        alert('Form is Submitted');\r\n    }\r\n   }\r\n\r\n   validate(){\r\n    let input = this.state.input;\r\n    let errors = {};\r\n    let isValid = true;\r\n\r\n    if (!input[\"fullname\"]) {\r\n      isValid = false;\r\n      errors[\"fullname\"] = \"Please enter your name.\";\r\n    }\r\n    if (typeof input[\"fullname\"] !== \"undefined\") {\r\n    \r\n        var newname = new RegExp(/^([a-zA-Z ]){2,30}$/);\r\n        if(!newname.test(input[\"fullname\"])){\r\n        isValid = false;\r\n        errors[\"fullname\"] = \"Please enter your name correctly.\";\r\n        }\r\n      \r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n    if (!input[\"email\"]) {\r\n      isValid = false;\r\n      errors[\"email\"] = \"Please enter your email Address.\";\r\n    }\r\n    if (typeof input[\"email\"] !== \"undefined\") {\r\n        \r\n      var pattern = new RegExp(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,3}$/);\r\n      if (!pattern.test(input[\"email\"])) {\r\n        isValid = false;\r\n        errors[\"email\"] = \"Please enter valid email address.\";\r\n      }\r\n    }\r\n\r\n\r\n\r\n    if(!input[\"mobile\"]){\r\n        isValid = false;\r\n        errors[\"mobile\"] = \"please enter your mobile number\"\r\n\r\n    }\r\n    if (typeof input[\"mobile\"] !== \"undefined\") {\r\n    \r\n        var number = new RegExp(/^(\\+\\d{1,3}[- ]?)?\\d{10}$/);\r\n        if(!number.test(input[\"mobile\"])){\r\n        isValid = false;\r\n        errors[\"mobile\"] = \"Please enter your valid mobile number.\";\r\n        }\r\n      \r\n    }\r\n\r\n    this.setState({\r\n      errors: errors\r\n    });\r\n\r\n    return isValid;\r\n\r\n\r\n   }\r\n\r\n\r\n\r\n\r\nrender(){\r\n    console.log(this.state)\r\n    return (\r\n        <div className='forum'>\r\n                            <Form onSubmit={this.handlesubmit}>\r\n                                    \r\n                                    <Form.Group controlId=\"formBasicName\">\r\n                                        <Form.Label>Name</Form.Label>\r\n                                        <Form.Control type=\"\" placeholder=\"Enter Your Name\" \r\n                                        name=\"fullname\"\r\n                                        value={this.state.input.fullname}\r\n                                        onChange={this.handlechangeall}\r\n                                        />\r\n                                        <div className=\"text-danger\">{this.state.errors.fullname}</div>\r\n                        \r\n                                     </Form.Group>        \r\n                                        \r\n                            \r\n                            \r\n                                    <Form.Group controlId=\"formBasicMobile\">\r\n                                        <Form.Label>Mobile Number</Form.Label>\r\n                                        <Form.Control type=\"tel\" placeholder=\"Enter Your Mobile Number\" \r\n                                        name=\"mobile\"\r\n                                        value={this.state.input.mobile}\r\n                                        onChange={this.handlechangeall}\r\n                                         />\r\n                                         <div className=\"text-danger\">{this.state.errors.mobile}</div>\r\n                                        <Form.Text className=\"text-muted\">\r\n                                        We'll never share your mobile number with anyone else.\r\n                                        </Form.Text>\r\n\r\n                                    </Form.Group>\r\n                                   \r\n                                <Form.Group controlId=\"formBasicEmail\">\r\n                                    <Form.Label >Email Address</Form.Label>\r\n                                    <Form.Control type=\"email\" placeholder=\"Enter Your Email\" \r\n                                    name=\"email\"\r\n                                    value={this.state.input.email}\r\n                                    onChange={this.handlechangeall}\r\n                                     />\r\n                                     <div className=\"text-danger\">{this.state.errors.email}</div>\r\n\r\n                                     <Form.Text className=\"text-muted\">\r\n\r\n                                    We'll never share your email with anyone else.\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Button variant=\"primary\" type=\"submit\" value=\"send\" > \r\n                                     Submit\r\n                                </Button>\r\n                             </Form>\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default ValidationForm;\r\n","import React from 'react';\r\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\r\nimport './Home.style.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className='header'>\r\n            <Link to = \"/\">\r\n                <HomeOutlinedIcon className=\"home__icon\"/>          \r\n            </Link>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Nav from './component/nav_bar.component';\nimport TableDynamic from './pages/table/table.component';\nimport ValidationForm from './pages/form/form.component';\nimport Home from './pages/Home/Home';\n\n\n\n\nfunction App() {\n  return (\n    <Router>\n            <div className=\"App\">\n              <Switch>\n                <Route exact path = '/'>\n                  <Home/>\n                  <Nav />\n                  <TableDynamic/>\n                </Route>\n                <Route path = '/table'>\n                <Home/>\n                <Nav/>\n                  <TableDynamic/>\n                </Route>\n                <Route path = '/form'>\n                <Home/>\n                <Nav/>\n                <ValidationForm/>\n                </Route>\n\n              \n              </Switch>    \n            </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {HashRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}